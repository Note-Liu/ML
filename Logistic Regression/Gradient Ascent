# -*- coding:UTF-8 -*-
import matplotlib.pyplot as plt
import numpy as np

'''
函数说明：加载数据
Parameters：
    无
Returns:
    dataMat---数据列表
    labelMat---标签列表
Modify:
2018-1-2
'''
def loadDataSet():
    #创建数据列表
    dataMat = []
    #创建标签列表
    labelMat = []
    #打开文件
    fr = open('testSet.txt')
    #逐行读取
    for line in fr.readlines():
        lineArr = line.strip().split()
        dataMat.append([1.0,float(lineArr[0]),float(lineArr[1])])
        labelMat.append(int(lineArr[2]))
    fr.close()
    return dataMat,labelMat

'''
函数说明：绘制数据集
Parameters：
    无
Returns：
    无
Modify:
    2018-1-2
'''
def plotDataSet():
    # 加载数据集
    dataMat, labelMat = loadDataSet()
    # 转换成numpy的array数组
    dataArr = np.array(dataMat)
    # 数据个数
    n = np.shape(dataMat)[0]
    # 正样本
    xcord1 = []
    ycord1 = []
    # 负样本
    xcord2 = []
    ycord2 = []
    for i in range(n):
        # 根据数据集标签进行分类
        if int(labelMat[i]) == 1:
            # 1为正样本
            xcord1.append(dataArr[i, 1])
            ycord1.append(dataArr[i, 2])
        else:
            # 0为负样本
            xcord2.append(dataArr[i, 1])
            ycord2.append(dataArr[i, 2])
    fig = plt.figure()
    # 添加subplot
    ax = fig.add_subplot(111)
    # 绘制正样本
    ax.scatter(xcord1, ycord1, s=20, c='red', marker='s', alpha=.5)
    # 绘制负样本
    ax.scatter(xcord2, ycord2, s=20, c='green', alpha=.5)
    # 绘制title
    plt.title('DataSet')
    # 绘制label
    plt.xlabel('x')
    plt.ylabel('y')
    # 显示
    plt.show()

'''
函数说明：sigmoid函数:
Parameters:
    inX----数据
Returns：
    sigmoid函数
Modify:
    2018-1-5
'''
def sigmoid(inX):
    return 1.0 / (1 + np.exp(-inX))

'''
函数说明：梯度上升算法
Parameters：
    dataMatIn --- 数据集
    classLabels ---数据标签
Returns:
    weights.getA() --求得的权重数组（最优参数)
Modify:
    2018-1-5
'''

def gradAscent(dataMatIn,classLabels):
    #转换成numpy的mat
    dataMatrix = np.mat(dataMatIn)
    #转换成numpy的mat，并进行转置
    labelMat = np.mat(classLabels).transpose()
    #返回dataMatrix的大小，m为行数，n为列数
    m,n = np.shape(dataMatrix)
    #移动步长，也就是学习率，控制更新的幅度
    alpha = 0.001
    #最大的迭代次数
    maxCycles = 500
    weights = np.ones((n,1))
    for k in range(maxCycles):
        #梯度上升矢量化公式
        h = sigmoid(dataMatrix * weights)
        error = labelMat - h
        weights = weights + alpha * dataMatrix.transpose() * error
    #将矩阵转换成数组，返回权重数组
    return weights.getA()


'''
函数说明：绘制数据集
Parameters：
    weights---权重参数数组
Returns：
    无
Modify:
    2018-1-5
'''

def plotBestFit(weights):
    #加载数据集
    dataMat,labelMat = loadDataSet()
    #转化成numpy的array数组
    dataArr = np.array(dataMat)
    #数据个数
    n = np.shape(dataMat)[0]
    #正样本
    xcord1 = [] ; ycord1 = []
    #负样本
    xcord2 = [] ;  ycord2 = []
    #根据数据集标签进行分类
    for i in range(n):
        #1为正样本
        if int(labelMat[i]) == 1:
            xcord1.append(dataArr[i,1])
            ycord1.append(dataArr[i,2])
        #0为负样本
        else:
            xcord2.append(dataArr[i,1])
            ycord2.append(dataArr[i,2])
    fig = plt.figure()
    #添加subplot
    ax = fig.add_subplot(111)
    #绘制正样本
    ax.scatter(xcord1,ycord1,s = 20,c = 'red',marker = 's',alpha = .5)
    #绘制负样本
    ax.scatter(xcord2,ycord2,s = 20,c = 'green',alpha = .5)
    x = np.arange(-3.0,3.0,0.1)
    y = (-weights[0] - weights[1] * x) / weights[2]
    ax.plot(x,y)
    #绘制title
    plt.title('BestFit')
    #绘制label
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.show()

if __name__ == "__main__":
    dataMat,labelMat = loadDataSet()
    weights = gradAscent(dataMat,labelMat)
    plotBestFit(weights)



