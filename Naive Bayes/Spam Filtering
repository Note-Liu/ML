import re
import numpy as np
import random

'''
函数说明：接收一个大写字符串并将其解析为字符串列表
Parameters:
    无
Returns:
    无
Modify:
    2018-12-28
'''

def textParse(bigString):
    #将特殊符号作为切分标志进行字符串切分，即非字母，非数字
    listOfTokens = re.split(r'\W.*?',bigString)
    #除了单个字母，例如大写的I，其他单词变成小写
    return [tok.lower() for tok in listOfTokens if len(tok) > 2]

'''
函数说明：将切分的实验样本词条整理成不重复的词条列表，也就是词汇列表
Parameters:
    dataSet---z整理的样本数据集
Returns：
    vocabSet---返回不重复的词条列表，也就是词汇表
Modify;
    2018-12-28
'''

def createVocabList(dataSet):
    #创建一个空的不重复的列表
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document)
    return list(vocabSet)

'''
函数说明：根据vocabList词汇表，将inputSet向量化，向量的每个元素为1或者0
Parameters：
    vocabList---createVocabList 返回的列表
    inputSet---切分的词条列表
Returns：
    returnVec---文档向量，词集模型
Modify:
    2018-12-27
'''
def setOfWordsVec(vocabList,inputSet):
    #创建一个其中所有元素为0的向量
    returnVec = [0] * len(vocabList)
    #遍历每个词条
    for word in inputSet:
        #如果词条存在于词汇表中，则置1
        if word in vocabList:
            returnVec[vocabList.index(word)] = 1
        else:
            print("the word:%s is not in my Vocabulary!"%word)
    return returnVec

'''
函数说明：根据vocabList词汇表，构建词袋模型
Parameters：
    vocabList ---- createVocabList返回的列表
    inputSet -----切分的词条列表
Returns：
    returnVec----文档向量，词袋模型
MOdify:
    2018-12-28
'''
def bagOfWordsVecMN(vocabList,inputSet):
    #创建一个其中所有元素都为0的向量
    returnVec = [0] * len(vocabList)
    #遍历每个词条
    for word in inputSet:
        #如果词条存在于词汇表中，则计数加1
        if word in vocabList:
            returnVec[vocabList.index(word)] += 1
    #返回词袋模型
    return returnVec

'''
函数说明：朴素贝叶斯分类器训练函数
Parameters：
    trainMatrix --- 训练文档矩阵，即setOfWordVec返回的returnVec构成的矩阵
    trainCategory---训练类别标签向量，即loadDataSet返回的classVec
Returns:
    p0Vect----非侮辱类的条件概率数组
    p1Vect---侮辱类的条件概率数组
    pAbusive---文档属于侮辱类的概率
Modify:
    2018-12-27
'''
def trainNB(trainMatrix,trainCategory):
    #计算训练的文档数目
    numTrainDocs = len(trainMatrix)
    #计算每篇文档的词条数目
    numWords = len(trainMatrix[0])
    #文档属于侮辱类的概率
    pAbusive = sum(trainCategory) / float(numTrainDocs)
    #创建numpy.zeros数组,词条出现数初始化为0
    p0Num = np.ones(numWords)
    p1Num = np.ones(numWords)
    #分母初始化为0
    p0Denom = 2.0
    p1Denom = 2.0
    for i in range(numTrainDocs):
        #统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)...
        if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else:
            #统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)...
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    p1Vect = np.log(p1Num / p1Denom)
    p0Vect = np.log(p0Num / p0Denom)
    #返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率
    return p0Vect,p1Vect,pAbusive

'''
函数说明：朴素贝叶斯分类器分类函数
Parameters：
    vec2Classify ---- 待分类的词条数组
    p0Vec----非侮辱类的条件概率数组
    p1Vec---侮辱类的条件概率数组
    pClass1---文档属于侮辱类的概率
Returns：
    0----属于非侮辱类
    1----属于侮辱类
Modify:
    2017-12-27
'''
def classifyNB(vecClassify,p0Vec,p1Vec,pClass1):
    #p1 = reduce(lambda x,y:x*y,vecClassify*p1Vec)*pClass1
    p1 = sum(vecClassify * p1Vec) + np.log(pClass1)
    #对应元素相乘.logA*B = logA + logB
    #p0 = reduce(lambda x,y:x*y,vecClassify*p0Vec)*(1.0 - pClass1)
    p0 = sum(vecClassify * p0Vec) + np.log(1.0 - pClass1)
    #print('p0:',p0)
    #print('p1:',p1)
    if p1 > p0:
        return 1
    else:
        return 0

'''
函数说明：测试朴素贝叶斯分类器
Parameters：
    无
Returns:
    无
Modify:
    2018-12-28
'''
def spamTest():
    docList = []
    classList = []
    fullText = []
    #遍历所有的txt文件
    for i in range(1,26):
        #读取每个垃圾邮件，并将字符串转换成字符串列表
        wordList = textParse(open('email/spam/%d.txt' % i, 'r',encoding = 'gb18030').read())
        docList.append(wordList)
        fullText.append(wordList)
        #标记垃圾邮件，1表示垃圾邮件
        classList.append(1)
        # 读取每个非垃圾邮件，并将字符串转换成字符串列表
        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())
        docList.append(wordList)
        fullText.append(wordList)
        # 标记垃圾邮件，0表示非垃圾邮件
        classList.append(0)
    #创建词汇表，不重复
    vocabList = createVocabList(docList)
    #创建存储训练集的索引值的列表和测试集的索引值的列表
    trainingSet = list(range(50))
    testSet = []
    #从50个邮件中，随机选择40个作为训练集，10个作为测试集
    for i in range(10):
        #随机选取索引值
        randIndex = int(random.uniform(0,len(trainingSet)))
        #添加测试集的索引值
        testSet.append(trainingSet[randIndex])
        #在训练集列表中删除添加到测试集里的索引值
        del(trainingSet[randIndex])
        #创建训练集矩阵和训练集类别标签向量
    trainMat = []
    trainClasses = []
    #遍历训练集
    for docIndex in trainingSet:
         #将生成的词集模型添加到训练矩阵中
         trainMat.append(setOfWordsVec(vocabList,docList[docIndex]))
         #将类别添加到训练集类别标签向量中
         trainClasses.append(classList[docIndex])
    #训练朴素贝叶斯模型
    p0V,p1V,pSpam = trainNB(np.array(trainMat),np.array(trainClasses))
    #错误分类计数
    errorCount = 0
    #遍历测试集
    for docIndex in testSet:
         #测试集的词集模型
         wordVector = setOfWordsVec(vocabList,docList[docIndex])
         #如果分类错误，错误计数加1
         if classifyNB(np.array(wordVector),p0V,p1V,pSpam) != classList[docIndex]:
             errorCount += 1
             print("分类错误的测试集：",docList[docIndex])
    print("错误率：%.2f%%"%(float(errorCount) / len(testSet) * 100))

    
if __name__ == "__main__":
    spamTest()












