import matplotlib.pyplot as plt
import numpy as np
from matplotlib.font_manager import FontProperties
'''
函数说明：加载数据
Parameters：
    fileName---文件名
Returns:
    xArr-----x数据集
    yArr------y数据集
Modify:
    2019-1-19
'''
def loadDataSet(fileName):
    #numFeat = len(open(fileName).readline().split('\t')) -1
    xArr = [];yArr = []
    fr = open(fileName)
    for line in fr.readlines():
        curLine = line.strip().split('\t')
        yArr.append(float(curLine[-1]))
        lineArr = []
        #for i in range(numFeat):
         #   lineArr.append(float(curLine[i]))
        #xArr.append(lineArr)
        xArr.append([float(curLine[0]),float(curLine[1])])
    fr.close()
    return xArr,yArr

'''
函数说明：绘制数据集
Parameters:
    无
Returns:
    无
Modify：
    2019-1-19

def plotDataSet():
    xMat,yArr= loadDataSet('ex0.txt')
    xArr = np.array(xMat)
    n = np.shape(xMat)[0]
    xcord=[]
    ycord=[]
    for i in range(n):
        xcord.append(xArr[i,1])
        ycord.append(yArr[i])
    fig=plt.figure()
    ax = fig.add_subplot(111)
    ax.scatter(xcord, ycord, s=20, c='blue', alpha=.5)
    plt.title('DataSet')
    plt.xlabel('X')
    plt.show()
'''
'''
函数说明：计算回归系数
Parameters：
    xArr---x数据集
    yArr----y数据集
Returns：
    ws----回归系数
Modify:
    2019-1-19
'''
def standRegres(xArr,yArr):
    xMat = np.mat(xArr)
    yMat = np.mat(yArr).T
    xTx = xMat.T * xMat
    if np.linalg.det(xTx) == 0.0:
        print("矩阵为奇异矩阵，不能求逆")
        return
    ws = xTx.I * (xMat.T * yMat)
    return ws

'''
函数说明:绘制回归曲线和数据点
Parameters：
    无
Returns：
    无
Modify:
    2019-1-19
'''
def plotRegression():
    xArr,yArr = loadDataSet('ex0.txt')
    #print(xArr)
    ws = standRegres(xArr,yArr)
    #print(ws)
    xMat = np.mat(xArr)
    #print(xMat)
    yMat = np.mat(yArr)
    xCopy = xMat.copy()
    xCopy.sort(0)
    #print(xCopy)
    yHat = xCopy * ws
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.plot(xCopy[:,1],yHat,c = "red")
    ax.scatter(xMat[:,1].flatten().A[0],yMat.T[:,0].flatten().A[0],s = 20,c = 'blue',alpha = .5)
    plt.title('DataSet')
    plt.xlabel('X')
    plt.show()



if __name__ == "__main__":
    plotRegression()
