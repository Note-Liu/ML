from  matplotlib.font_manager import FontProperties
import matplotlib.pyplot as plt
import numpy as np
'''
函数说明：加载数据
Parameters：
    fileName----文件名
Returns：
    xArr-----x数据集
    yArr------y数据集
Modify:
    2019-1-23
'''
def loadDataSet(fileName):
    xArr = []
    yArr = []
    fr = open(fileName)
    for line in fr.readlines():
        frline = line.strip().split('\t')
        xArr.append([float(frline[0]),float(frline[1])])
        yArr.append(float(frline[-1]))
    fr.close()
    return xArr,yArr

'''
函数说明：绘制多条局部加权回归曲线
Parameters：
    无
Returns：
    无
Modify:
    2019-1-23
'''
def plotlwlrRegression():
    font = FontProperties(fname = r"c:\windows\fonts\simsun.ttc",size=14)
    #加载数据集
    xArr,yArr = loadDataSet('ex0.txt')
    #根据局部加权线性回归计算yHat
    yHat_1 = lwlrTest(xArr,xArr,yArr,1.0)
    yHat_2 = lwlrTest(xArr,xArr,yArr,0.01)
    yHat_3 = lwlrTest(xArr,xArr,yArr,0.003)
    #创建xMat,yMat矩阵
    xMat = np.mat(xArr)
    yMat = np.mat(yArr)
    #排序，返回索引值
    strInd = xMat[:,1].argsort(0)
    xSort = xMat[strInd][:,0,:]
    fig,axs = plt.subplots(nrows = 3,ncols =1,sharex=False,sharey = False,figsize=(10,8))
    #绘制回归曲线
    axs[0].plot(xSort[:,1],yHat_1[strInd],c='red')
    axs[1].plot(xSort[:,1],yHat_2[strInd],c='red')
    axs[2].plot(xSort[:,1],yHat_3[strInd],c='red')
    #绘制样本点
    axs[0].scatter(xMat[:,1].flatten().A[0],yMat.flatten().A[0],s=20,c='blue',alpha = .5)
    axs[1].scatter(xMat[:,1].flatten().A[0],yMat.flatten().A[0],s=20,c='blue',alpha = .5)
    axs[2].scatter(xMat[:,1].flatten().A[0],yMat.flatten().A[0],s=20,c='blue',alpha =  .5)
    #设置标题，x轴label,y轴label
    axs0_title_text = axs[0].set_title(u'局部加权回归曲线k=1.0',FontProperties=font)
    axs1_title_text = axs[1].set_title(u'局部加权回归曲线k=0.01',FontProperties=font)
    axs2_title_text = axs[2].set_title(u'局部加权回归曲线k=0.003',FontProperties=font)
    plt.setp(axs0_title_text,size=8,weight='bold',color = 'red')
    plt.setp(axs1_title_text,size = 8 ,weight = 'bold',color = 'red')
    plt.setp(axs2_title_text,size = 8, weight = 'bold',color = 'red')
    plt.xlabel('X')
    plt.show()

'''
函数说明：使用局部加权线性回归计算回归系数
Parameters：
    testPoint----测试样本点
    xArr----x数据集
    yArr----y数据集
    k-----高斯核的k,自定义参数
Returns：
    ws-----回归系数
Modify:
    2019-1-23
'''
def lwlr(testPoint,xArr,yArr,k=1.0):
    xMat = np.mat(xArr)
    yMat = np.mat(yArr).T
    m = np.shape(xMat)[0]
    #创建权重对角矩阵
    weights = np.mat(np.eye((m)))
    for j in range(m):
        #遍历数据集计算每个样本的权重
        diffMat = testPoint - xMat[j,:]
        weights[j,j] = np.exp(diffMat * diffMat.T/(-2.0*k**2))
    xTx = xMat.T * (weights *xMat)
    if np.linalg.det(xTx) == 0.0:
        print("矩阵为奇异矩阵，不能求逆")
        return
    ws = xTx.I * (xMat.T *(weights * yMat))
    return testPoint * ws

'''
函数说明：局部加权线性回归测试
Parameters： 
    testArr----测试数据集
    xArr-----x数据集
    yArr-----y数据集
    k----高斯核的k,自定义参数
Returns：
    ws----回归系数
Modify:
    2019-1-23
'''

def lwlrTest(testArr,xArr,yArr,k=1.0):
    #计算测试数据集大小
    m = np.shape(testArr)[0]
    yHat = np.zeros(m)
    #对每个样本点进行预测
    for i in range(m):
            yHat[i] = lwlr(testArr[i],xArr,yArr,k)
    return yHat


if __name__ == "__main__":
        plotlwlrRegression()




